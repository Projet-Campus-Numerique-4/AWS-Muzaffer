AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  AppName:
    Type: String
    Default: campus-app
  Stage:
    Type: String
    Default: dev

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for this API
          Quota:
            Limit: 500
            Period: MONTH
          Throttle:
            BurstLimit: 100
            RateLimit: 50
        ApiKeyRequired: true
      Cors:
        AllowMethods: "'POST, GET, OPTIONS, PUT'"
        AllowHeaders: "'Accept, Content-Type, Content-Length, Authorization, X-Api-Key'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      Name:
        Fn::Sub: ${AppName}-api-${Stage}
      StageName: !Ref Stage 
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: specification/openapi-specification.yml
          
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      Path: 
        Fn::Sub: /${Stage}/${AppName}/serviceRoles/
      RoleName: 
        Fn::Sub: ${AppName}-api-execution-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 
            Fn::Sub: ${AppName}-api-execution-role-policy-${Stage}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  Fn::Sub: ${GetDevices.Arn}
    
  GetDevicesRole:
    Type: AWS::IAM::Role
    Properties:
      Path: 
        Fn::Sub: /${Stage}/${AppName}/serviceRoles/
      RoleName: 
        Fn::Sub: ${AppName}-get-devices-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 
            Fn::Sub: ${AppName}-get-devices-role-policy-dynamo-${Stage}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  Fn::Sub: ${DevicesTable.Arn}
        - PolicyName: 
            Fn::Sub: ${AppName}-get-devices-role-policy-logs-${Stage}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  "arn:aws:logs:*:*:*"
  
  AggrLogsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: 
        Fn::Sub: /${Stage}/${AppName}/serviceRoles/
      RoleName: 
        Fn::Sub: ${AppName}-aggr-logs-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 
            Fn::Sub: ${AppName}-aggr-logs-role-policy-dynamo-${Stage}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                Resource:
                  - Fn::Sub: ${DevicesTable.Arn}
                  - Fn::Sub: ${LogsTable.Arn}
        - PolicyName: 
            Fn::Sub: ${AppName}-aggr-logs-role-policy-logs-${Stage}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  "arn:aws:logs:*:*:*"

  DevicesTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: 
        Fn::Sub: ${AppName}-table-device-${Stage}
      AttributeDefinitions: 
        - AttributeName: pk
          AttributeType: S
      KeySchema: 
        - AttributeName: pk
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  LogsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: 
        Fn::Sub: ${AppName}-table-logs-${Stage}
      AttributeDefinitions: 
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: N
      KeySchema: 
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      BillingMode: PAY_PER_REQUEST
  
  GetDevicesLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: [ GetDevices ]
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetDevices}
      RetentionInDays: 7

  GetDevices:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      Tracing: Active
      Runtime: python3.9
      PackageType: Zip
      FunctionName:
        Fn::Sub: ${AppName}-get-devices-${Stage}
      Description: Get the list of devices
      CodeUri: ./src/devices
      Handler: handler.get_devices
      Role: 
        Fn::Sub: ${GetDevicesRole.Arn}
      Environment:
        Variables:
          TABLE_NAME: !Ref DevicesTable

  AggrDataLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: [ AggrData ]
    Properties:
      LogGroupName: !Sub /aws/lambda/${AggrData}
      RetentionInDays: 7

  AggrData:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      Tracing: Active
      Runtime: python3.8 # User 3.8 to user public lambda layer (https://github.com/keithrozario/Klayers/tree/master/deployments/python3.8)
      Layers:
        - arn:aws:lambda:eu-west-2:770693421928:layer:Klayers-python38-numpy:22
      PackageType: Zip
      FunctionName:
        Fn::Sub: ${AppName}-aggr-data-${Stage}
      Description: Aggregate data from devices
      CodeUri: ./src/logs
      Handler: aggregate.aggregate
      Events:
        Aggregate:
          Type: Schedule
          Properties:
            Schedule: cron(*/10 * * * ? *) # Run every 10 min
      Role: 
        Fn::Sub: ${AggrLogsRole.Arn}
      Environment:
        Variables:
          DEVICES_TABLE_NAME: !Ref DevicesTable
          LOGS_TABLE_NAME: !Ref LogsTable
    